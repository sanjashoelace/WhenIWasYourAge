{"version":3,"sources":["components/Header.js","components/Form.js","constants/api_keys.js","components/Songs.js","components/TV.js","components/Movies.js","components/DadJoke.js","App.js","serviceWorker.js","index.js"],"names":["Header","Form","props","state","oldAge","birthday","youngAge","year","ChangeHandler","bind","handleSubmit","Date","getFullYear","this","parseInt","e","preventDefault","onYearFound","getYear","setState","target","name","value","className","onSubmit","id","type","required","onChange","form","Component","MOVIE_DB_API_KEY","Songs","songs","axios","get","params","data","tracks","track","console","log","message","prevProps","prevState","fetchTopTracks","songDetails","map","singleSong","key","mbid","href","url","artist","length","renderTopSongs","color","height","width","React","TV","tv","results","TVShows","slice","show","poster","poster_path","link","alt","src","overview","fetchTV","renderTVShows","Movies","movies","TopMovies","movie","original_title","fetchMovies","renderMovies","DadJoke","joke","headers","jokes","fetchDadJoke","App","yearData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10f33e47.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <header>\n            When I was your age . . .\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Form extends Component {\n    constructor(props){\n        super(props) \n        this.state = {\n            oldAge: 0,\n            birthday: 0,\n            youngAge: 0,\n            year: null\n        }\n        this.ChangeHandler = this.ChangeHandler.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    getYear () {\n        const currentYear = new Date().getFullYear();\n        const ageDiff = this.state.oldAge - this.state.youngAge + parseInt(this.state.birthday);\n        return currentYear - ageDiff;\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onYearFound( this.getYear() );\n        this.setState({ year: this.getYear() });\n    }\n\n    ChangeHandler(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render(){\n        if (this.state.year) {\n            return (\n                <div className=\"form clearfix\">\n                    <h2>...In {this.state.year}</h2>\n                    <h3>The Top TV Shows Were:</h3>\n                    <h3>The Top Songs Were:</h3>\n                    <h3>The Top Movies Were:</h3>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit} id='form1'>\n                    <p>How old are you?</p>\n                    <input type='number' name='oldAge' required onChange={this.ChangeHandler} />\n                    <p>Have you celebrated your birthday yet this year? </p>\n                    <input type='radio' name='birthday' value='0' required onChange={this.ChangeHandler} /> <label>Yes</label>\n                    <input type='radio' name='birthday' value='1' required onChange={this.ChangeHandler} /> <label>No</label>\n                    <p>How old is the kid? </p>\n                    <input type='number' name='youngAge' required onChange={this.ChangeHandler} />\n                </form>\n                <button type=\"submit\" form=\"form1\" value=\"Submit\">Submit</button>\n            </div>\n        )\n    }\n}\n\nexport default Form;","export const LAST_FM_API_KEY= '621d4bf04d40033003b4853c39ce536c';\nexport const MOVIE_DB_API_KEY = '7eecbc420d0abb454bb030dcc47e157f';\n\nexport default { LAST_FM_API_KEY, MOVIE_DB_API_KEY }","import React from 'react';\nimport axios from 'axios';\nimport { LAST_FM_API_KEY } from '../constants/api_keys';\nimport ReactLoading from 'react-loading';\n\nclass Songs extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            songs: []\n        }\n    }\n\n    async fetchTopTracks() {\n        try {\n            const songs = await axios.get('http://ws.audioscrobbler.com/2.0/?method=tag.getTopTracks', { params: {\n                'api_key': `${LAST_FM_API_KEY}`, 'tag': `${this.props.year}`, 'limit': 10, 'page': 1, 'format': 'json'\n\n            }})\n        this.setState({\n            songs: songs.data.tracks.track\n            \n        })\n        console.log(songs);\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.year !== prevProps.year)\n            this.fetchTopTracks();\n    }\n\n    renderTopSongs() {\n        const songDetails = this.state.songs.map((singleSong) => {\n            return (\n                <div key={singleSong.mbid} className=\"songDetails\">\n                    <a href={singleSong.url}>{singleSong.name}</a>\n                    <p className=\"by\">By: {singleSong.artist.name}</p>\n                </div>\n            )\n        })\n        return (\n            <div>\n                {songDetails}\n            </div>\n        )\n    }\n\n    render() {\n        if (!this.props.year) {\n            return (\n                <div>\n\n                </div>\n            )\n        } else if (!this.state.songs.length) {\n            return (\n                <div className=\"loading\">\n                    <ReactLoading className='center' type={'spinningBubbles'} color={'blue'} height={'50px'} width={'50px'} />\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"songs lists\">\n                {this.renderTopSongs()}\n            </div>\n        )\n    }\n\n}\n\nexport default Songs;","import React from 'react';\nimport axios from 'axios';\nimport { MOVIE_DB_API_KEY } from '../constants/api_keys'\nimport ReactLoading from 'react-loading';\n\n\nclass TV extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            tv: []\n        }\n    }\n\n    async fetchTV() {\n        try {\n            const tv = await axios.get('https://api.themoviedb.org/3/discover/tv', { params: { 'api_key': `${MOVIE_DB_API_KEY}`, 'language':'en-US', 'sort_by':'popularity.desc','include_adult':false , 'include_video':false , 'page':1, 'first_air_date_year': `${this.props.year}`, 'with_original_language':'en'}\n            })\n        this.setState({\n            tv: tv.data.results\n        })\n        console.log(tv);\n        } catch (error) {\n        console.log(error.message);\n        }\n    }\n\n    renderTVShows(){\n\n        const TVShows = this.state.tv.slice(0, 10).map((show) => {\n            let poster = `https://image.tmdb.org/t/p/w1280/${show.poster_path}`;\n            let link = `https://www.themoviedb.org/tv/${show.id}`\n            return (\n                <div key={show.id}>\n                    <a href={link}>{show.name}</a>\n                    <a href={link}>\n                        <img alt=\"\" src={poster}></img>\n                    </a>\n                    <p>{show.overview}</p>\n                </div>\n            )\n        })\n        return (\n            <div>\n                {TVShows}\n            </div>\n        )\n    }\n\n    //tv image poster link: https://image.tmdb.org/t/p/w1280 poster_path\n    //tv link: https://www.themoviedb.org/tv/ id\n    \n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.year !== prevProps.year)\n            this.fetchTV();\n    }\n\n    render() {\n        if (!this.props.year) {\n            return (\n                <div>\n\n                </div>\n        ) } else if (!this.state.tv.length) {\n            return (\n                <div className=\"loading\">\n                    <ReactLoading className='center' type={'spinningBubbles'} color={'blue'} height={'50px'} width={'50px'} />\n                </div>\n            )\n        }\n        return (\n            <div className=\"tv lists\">\n                {this.renderTVShows()}\n            </div>\n        )\n\n    }\n\n}\n\nexport default TV;","import React from 'react';\nimport axios from 'axios';\nimport { MOVIE_DB_API_KEY } from '../constants/api_keys'\nimport ReactLoading from 'react-loading';\n\nclass Movies extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            movies: []\n        }\n    }\n\n    async fetchMovies() {\n        try {\n            const movies = await axios.get('https://api.themoviedb.org/3/discover/movie', { params: { 'api_key': `${MOVIE_DB_API_KEY}`, 'language':'en-US', 'sort_by':'popularity.desc','include_adult':false , 'include_video':false , 'page':1 , 'year': 2000 , 'with_original_language':'en'}\n            })\n        this.setState({\n            movies: movies.data.results\n        });\n        console.log(movies);\n        } catch (error) {\n        console.log(error.message);\n        }\n    }\n\n    //movies image poster link: https://image.tmdb.org/t/p/w1280 poster_path\n    // movie link: https://www.themoviedb.org/movie/ id\n\n\n\n    renderMovies(){\n        const TopMovies = this.state.movies.slice(0,10).map((movie) => {\n            let poster = `https://image.tmdb.org/t/p/w1280/${movie.poster_path}`;\n            let link=`https://www.themoviedb.org/movie/${movie.id}`\n            return (\n                <div key={movie.id}>\n                    <a href={link}>{movie.original_title}</a>\n                    <a href={link}>\n                        <img alt=\"\" src={poster}></img>\n                    </a>\n                    <p>{movie.overview}</p>\n                </div>\n            )\n        })\n        return (\n            <div>\n                {TopMovies}\n            </div>\n        )\n    }\n\n    \n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.year !== prevProps.year)\n            this.fetchMovies();\n    }\n\n    render() {\n        if (!this.props.year) {\n            return (\n                <div>\n\n                </div>\n            ) } else if (!this.state.movies.length) {\n            return (\n                <div className=\"loading\">\n                    <ReactLoading className='center' type={'spinningBubbles'} color={'blue'} height={'50px'} width={'50px'} />\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"movies lists\">\n                {this.renderMovies()}\n            </div>\n        )\n\n    }\n\n}\n\nexport default Movies;","import React from 'react';\nimport axios from 'axios';\n\nclass DadJoke extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            joke: []\n        }\n    }\n\n    async fetchDadJoke() {\n        try {\n            const jokes = await axios.get('https://icanhazdadjoke.com/', { headers: {\n                'Accept': 'application/json'}})\n        this.setState({\n            joke: jokes.data.joke\n        })\n        console.log(jokes);\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.year !== prevProps.year)\n            this.fetchDadJoke();\n    }\n\n    render() {\n        if (!this.state.joke.length) {\n            return (\n                <div>\n\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"dadjokes\">\n                <h3>Here's a complimentary dad joke 😂 </h3>\n                <p>{this.state.joke}</p>\n            </div>\n        )\n\n    }\n\n}\n\nexport default DadJoke;","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport Form from './components/Form'\nimport Songs from './components/Songs';\nimport TV from './components/TV'\nimport Movies from './components/Movies'\n// import AllLoad from './components/AllLoad'\nimport DadJoke from './components/DadJoke'\nimport './styles/styles.scss';\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      year: 0\n    }\n    \n  }\n\n  onYearFound = (yearData) => {\n    console.log(yearData);\n    this.setState({ year: yearData});\n  }\n\n  render() {\n    return (\n      <main className=\"wrapper\">\n          <Header />\n          <Form onYearFound={this.onYearFound} />\n          <div className=\"outter tall\">\n            <div className=\"clearfix scroll\">\n              <TV year={this.state.year} />\n              <Songs year={this.state.year} />\n              <Movies year={this.state.year} />\n              <div className=\"emptydiv\"></div>\n            </div>\n          </div>\n          {/* <AllLoad year={this.state.year} /> */}\n          <DadJoke year={this.state.year} />\n      </main>\n    )\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}